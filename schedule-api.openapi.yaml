openapi: 3.0.3
info:
  title: University Schedule Management API
  version: '1.3'
  description: API for managing university schedules, classes, user registration, and schedule generation on a weekly basis per semester.
servers:
  - url: https://api.example.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - role
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - student
            - teacher
            - admin
          description: Role of the user
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - student
            - teacher
            - admin
    Schedule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        semester:
          type: string
          description: Semester for which the schedule is valid
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      required:
        - title
        - dayOfWeek
        - startTime
        - endTime
        - scheduleId
        - groupId
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        dayOfWeek:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
        startTime:
          type: string
          pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
          description: Start time in HH:mm format
        endTime:
          type: string
          pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
          description: End time in HH:mm format
        scheduleId:
          type: string
          description: ID of the schedule this event belongs to
        groupId:
          type: string
          description: ID of the group associated with this event
    Subject:
      type: object
      required:
        - name
        - hoursPerWeek
      properties:
        id:
          type: string
          description: Unique identifier for the subject
        name:
          type: string
        hoursPerWeek:
          type: integer
          description: Number of hours per week the subject is taught
    Group:
      type: object
      required:
        - name
        - subjects
      properties:
        id:
          type: string
          description: Unique identifier for the group
        name:
          type: string
          description: Name or identifier of the group
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
    Teacher:
      type: object
      required:
        - name
        - subjects
        - maxHoursPerWeek
      properties:
        id:
          type: string
          description: Unique identifier for the teacher
        name:
          type: string
        subjects:
          type: array
          items:
            type: string
            description: ID of subjects the teacher can teach
        maxHoursPerWeek:
          type: integer
          description: Maximum number of hours the teacher can work per week
    GenerateScheduleRequest:
      type: object
      required:
        - semester
      properties:
        semester:
          type: string
          description: Semester for which the schedule is to be generated
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

security:
  - BearerAuth: []

paths:
  /v1/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /v1/users/login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /v1/schedules:
    get:
      tags:
        - Schedules
      summary: Get all schedules for the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Schedules
      summary: Create a new schedule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semester
              properties:
                name:
                  type: string
                semester:
                  type: string
                  description: Semester for which the schedule is valid
      responses:
        '201':
          description: Schedule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/schedules/{scheduleId}:
    get:
      tags:
        - Schedules
      summary: Get a schedule by ID
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Schedules
      summary: Update a schedule
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                semester:
                  type: string
                  description: Semester for which the schedule is valid
      responses:
        '200':
          description: Schedule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Schedules
      summary: Delete a schedule
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Schedule deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/events:
    post:
      tags:
        - Events
      summary: Create a new event (class)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - dayOfWeek
                - startTime
                - endTime
                - scheduleId
                - groupId
              properties:
                title:
                  type: string
                description:
                  type: string
                dayOfWeek:
                  type: string
                  enum:
                    - Monday
                    - Tuesday
                    - Wednesday
                    - Thursday
                    - Friday
                    - Saturday
                    - Sunday
                startTime:
                  type: string
                  pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                  description: Start time in HH:mm format
                endTime:
                  type: string
                  pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                  description: End time in HH:mm format
                scheduleId:
                  type: string
                groupId:
                  type: string
                  description: ID of the group associated with this event
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /v1/events/{eventId}:
    get:
      tags:
        - Events
      summary: Get an event by ID
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Events
      summary: Update an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
              properties:
                title:
                  type: string
                description:
                  type: string
                dayOfWeek:
                  type: string
                  enum:
                    - Monday
                    - Tuesday
                    - Wednesday
                    - Thursday
                    - Friday
                    - Saturday
                    - Sunday
                startTime:
                  type: string
                  pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                  description: Start time in HH:mm format
                endTime:
                  type: string
                  pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
                  description: End time in HH:mm format
                scheduleId:
                  type: string
                groupId:
                  type: string
                  description: ID of the group associated with this event
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
    delete:
      tags:
        - Events
      summary: Delete an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Event deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/schedules/generate:
    post:
      tags:
        - Schedules
      summary: Generate a weekly schedule based on the current groups, subjects, and teachers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateScheduleRequest'
      responses:
        '201':
          description: Schedule generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # New Endpoints for Groups
  /v1/groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Groups
      summary: Create a new group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get a group by ID
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Groups
      summary: Update a group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Groups
      summary: Delete a group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # New Endpoints for Subjects
  /v1/subjects:
    get:
      tags:
        - Subjects
      summary: Get all subjects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Subjects
      summary: Create a new subject
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '201':
          description: Subject created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/subjects/{subjectId}:
    get:
      tags:
        - Subjects
      summary: Get a subject by ID
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subject details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Subjects
      summary: Update a subject
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Subject updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Subjects
      summary: Delete a subject
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Subject deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # New Endpoints for Teachers
  /v1/teachers:
    get:
      tags:
        - Teachers
      summary: Get all teachers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Teachers
      summary: Create a new teacher
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '201':
          description: Teacher created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/teachers/{teacherId}:
    get:
      tags:
        - Teachers
      summary: Get a teacher by ID
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Teachers
      summary: Update a teacher
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: Teacher updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Teachers
      summary: Delete a teacher
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Teacher deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

