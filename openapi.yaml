openapi: 3.0.3
info:
  title: University Schedule Management API
  version: '1.4'
  description: >
    API for managing university schedules, classes, user registration, and schedule generation on a weekly basis per semester.
servers:
  - url: https://api.example.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - role
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - student
            - teacher
            - admin
          description: Role of the user
      example:
        username: 'john_doe'
        email: 'john.doe@example.com'
        password: 'SecureP@ssw0rd!'
        role: 'student'

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        email: 'john.doe@example.com'
        password: 'SecureP@ssw0rd!'

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - student
            - teacher
            - admin
      example:
        id: '1'
        username: 'john_doe'
        email: 'john.doe@example.com'
        role: 'student'

    Schedule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        semesterId:
          type: string
        semesterTitle:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        id: 'sched_123'
        name: 'Fall Semester Schedule'
        semesterId: '1'
        semesterTitle: 'Fall 2024'
        events:
          - id: 'event_456'
            title: 'Physics Lecture'
            description: 'Introduction to Mechanics'
            date: '2024-09-01'
            dayOfWeek: 'Monday'
            startTime: '09:00'
            endTime: '10:30'
            scheduleId: 'sched_123'
            groupId: 'group_789'

    Event:
      type: object
      required:
        - title
        - dayOfWeek
        - startTime
        - endTime
        - scheduleId
        - groupName
        - teacherName
        - subjectName
        - classroomName
        - lessonType
      properties:
        id:
          type: string
          description: Unique identifier of the event
        title:
          type: string
          description: Title of the event
        dayOfWeek:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          description: Day of the week when the event occurs
        startTime:
          type: string
          pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
          description: Start time in HH:mm format
        endTime:
          type: string
          pattern: '^([01]\d|2[0-3]):([0-5]\d)$'
          description: End time in HH:mm format
        scheduleId:
          type: string
          description: ID of the schedule this event belongs to
        groupName:
          type: string
          description: Name of the group associated with this event
        teacherName:
          type: string
          description: Name of the teacher conducting the event
        subjectName:
          type: string
          description: Subject of the event
        classroomName:
          type: string
          description: Classroom where the event takes place
        lessonType:
          type: string
          enum:
            - lecture
            - practice
            - lab
          description: Type of the lesson (lecture, practice, or lab)
      example:
        id: '1'
        title: 'Статистичне моделювання'
        dayOfWeek: 'Monday'
        startTime: '08:40'
        endTime: '09:25'
        scheduleId: '1'
        groupName: 'K-17'
        teacherName: 'Тарас Панченко'
        subjectName: 'Статистичне моделювання'
        classroomName: 'Аудиторія 221'
        lessonType: 'practice'

    Subject:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          description: Unique identifier for the subject
        name:
          type: string
      example:
        id: 'subject_101'
        name: 'Calculus I'
        hoursPerWeek: 4

    Group:
      type: object
      required:
        - name
        - subjects
      properties:
        id:
          type: string
          description: Unique identifier for the group
        name:
          type: string
          description: Name or identifier of the group
        speciality:
          type: integer
          description: Specialization or major of the group
        course_number:
          type: integer
          description: Course of the group
        students_count:
          type: integer
          description: Number of students in the group
      example:
        id: 'group_789'
        name: 'Group A'
        subjects:
          - id: 'subject_101'
            name: 'Calculus I'
            hoursPerWeek: 4

    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the teacher
        first_name:
          type: string
          description: First name of the teacher
        last_name:
          type: string
          description: Last name of the teacher
        max_hours_per_week:
          type: integer
          description: Maximum teaching hours per week
        created_at:
          type: string
          format: date-time
          description: Record creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Record update timestamp
        user:
          $ref: '#/components/schemas/User'
        teachingAssignments:
          type: array
          items:
            $ref: '#/components/schemas/TeachingAssignment'
          description: Teaching assignments for the teacher
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: Events conducted by the teacher
      required:
        - first_name
        - last_name
        - max_hours_per_week

    CreateTeacherDto:
      type: object
      properties:
        first_name:
          type: string
          description: First name of the teacher
        last_name:
          type: string
          description: Last name of the teacher
        max_hours_per_week:
          type: integer
          description: Maximum teaching hours per week
      required:
        - first_name
        - last_name
        - max_hours_per_week

    UpdateTeacherDto:
      type: object
      properties:
        first_name:
          type: string
          description: First name of the teacher
        last_name:
          type: string
          description: Last name of the teacher
        max_hours_per_week:
          type: integer
          description: Maximum teaching hours per week
      required:
        - first_name
        - last_name
        - max_hours_per_week

    TeachingAssignment:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the teaching assignment
        teacher:
          type: object
          properties:
            id:
              type: string
              description: ID of the assigned teacher
            fullName:
              type: string
              description: Full name of the teacher
          required:
            - id
            - fullName
        studentGroup:
          type: object
          properties:
            id:
              type: string
              description: ID of the student group
            name:
              type: string
              description: Name of the student group
          required:
            - id
            - name
        subject:
          type: object
          properties:
            id:
              type: string
              description: ID of the subject
            name:
              type: string
              description: Name of the subject
          required:
            - id
            - name
        speciality:
          type: integer
          description: Speciality code
        courseNumber:
          type: integer
          description: Course number
        lectureHoursPerSemester:
          type: integer
          description: Lecture hours per semester
        practiceHoursPerSemester:
          type: integer
          description: Practice hours per semester
        labHoursPerSemester:
          type: integer
          description: Lab hours per semester
        seminarHoursPerSemester:
          type: integer
          description: Seminar hours per semester
        created_at:
          type: string
          format: date-time
          description: Record creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Record update timestamp
      required:
        - id
        - teacher
        - studentGroup
        - subject
        - speciality
        - courseNumber

    GenerateScheduleRequest:
      type: object
      required:
        - semesterId
      properties:
        semesterId:
          type: string
          description: Semester ID for which the schedule is to be generated
        config:
          $ref: '#/components/schemas/GeneticAlgorithmConfigDto'
      example:
        semesterId: '1'
        config:
          populationSize: 100
          crossoverRate: 0.8
          mutationRate: 0.01
          generations: 50

    GeneticAlgorithmConfigDto:
      type: object
      properties:
        populationSize:
          type: integer
          minimum: 1
        crossoverRate:
          type: number
          format: float
          minimum: 0
          maximum: 1
        mutationRate:
          type: number
          format: float
          minimum: 0
          maximum: 1
        generations:
          type: integer
          minimum: 1
      example:
        populationSize: 100
        crossoverRate: 0.8
        mutationRate: 0.01
        generations: 50

    Classroom:
      type: object
      required:
        - id
        - name
        - capacity
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the classroom
        name:
          type: string
          description: Name of the classroom
        capacity:
          type: integer
          description: Maximum number of students the classroom can accommodate
        created_at:
          type: string
          format: date-time
          description: Timestamp when the classroom was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the classroom was last updated
      example:
        id: 1
        name: 'Physics 101'
        capacity: 30
        created_at: '2024-10-26T12:34:56.789Z'
        updated_at: '2024-10-26T12:34:56.789Z'

    Semester:
      type: object
      required:
        - id
        - title
        - start_date
        - end_date
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Unique identifier for the semester
        title:
          type: string
          description: Title of the semester
        start_date:
          type: string
          format: date
          description: Start date of the semester
        end_date:
          type: string
          format: date
          description: End date of the semester
        created_at:
          type: string
          format: date-time
          description: Timestamp when the semester was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the semester was last updated
      example:
        id: '1'
        title: 'Fall 2024'
        start_date: '2024-09-01'
        end_date: '2024-12-31'
        created_at: '2024-10-26T12:34:56.789Z'
        updated_at: '2024-10-26T12:34:56.789Z'

    CreateSemesterDto:
      type: object
      required:
        - title
        - start_date
        - end_date
      properties:
        title:
          type: string
          description: Title of the semester
        start_date:
          type: string
          format: date
          description: Start date of the semester in ISO format
        end_date:
          type: string
          format: date
          description: End date of the semester in ISO format
      example:
        title: 'Spring 2025'
        start_date: '2025-01-15'
        end_date: '2025-05-15'

    UpdateSemesterDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the semester
        start_date:
          type: string
          format: date
          description: Start date of the semester in ISO format
        end_date:
          type: string
          format: date
          description: End date of the semester in ISO format
      example:
        title: 'Advanced Spring 2025'
        start_date: '2025-01-20'
        end_date: '2025-05-20'

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Unauthorized access'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Resource not found'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Invalid input data'

security:
  - BearerAuth: []

paths:
  /v1/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /v1/users/login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6...'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Invalid email or password'

  /v1/schedules:
    get:
      tags:
        - Schedules
      summary: Get all schedules for the current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Schedules
      summary: Create a new schedule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semesterId
              properties:
                name:
                  type: string
                semesterId:
                  type: string
                  description: ID of the semester for which the schedule is valid
              example:
                name: 'Fall Semester Schedule'
                semesterId: '1'
      responses:
        '201':
          description: Schedule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/schedules/{scheduleId}:
    get:
      tags:
        - Schedules
      summary: Get a schedule by ID
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
          description: ID of the schedule to retrieve
      responses:
        '200':
          description: Schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Schedules
      summary: Update a schedule
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
          description: ID of the schedule to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                semesterId:
                  type: string
                  description: ID of the semester for which the schedule is valid
              example:
                name: 'Updated Fall Semester Schedule'
                semesterId: '1'
      responses:
        '200':
          description: Schedule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Schedules
      summary: Delete a schedule
      security:
        - BearerAuth: []
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type: string
          description: ID of the schedule to delete
      responses:
        '204':
          description: Schedule deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/schedules/semester/{semesterId}:
    get:
      tags:
        - Schedules
      summary: Get all schedules by semester ID
      security:
        - BearerAuth: []
      parameters:
        - name: semesterId
          in: path
          required: true
          schema:
            type: string
          description: ID of the semester
      responses:
        '200':
          description: List of schedules for the semester
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /v1/schedules/events:
    get:
      tags:
        - Events
      summary: Fetch events filtered by start and end dates (inclusive)
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: The start date in 'YYYY-MM-DD' format
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: The end date in 'YYYY-MM-DD' format
      responses:
        '200':
          description: List of events within the date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/schedules/generate:
    post:
      tags:
        - Schedules
      summary: Generate a weekly schedule based on the current groups, subjects, and teachers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateScheduleRequest'
            example:
              semesterId: '1'
              config:
                populationSize: 100
                crossoverRate: 0.8
                mutationRate: 0.01
                generations: 50
      responses:
        '201':
          description: Schedule generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/events:
    post:
      tags:
        - Events
      summary: Create a new event (class)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              title: 'Chemistry Lecture'
              description: 'Organic Chemistry Basics'
              date: '2024-09-02'
              dayOfWeek: 'Tuesday'
              startTime: '11:00'
              endTime: '12:30'
              scheduleId: 'sched_123'
              groupId: 'group_789'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /v1/events/{eventId}:
    get:
      tags:
        - Events
      summary: Get an event by ID
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: ID of the event to retrieve
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Events
      summary: Update an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: ID of the event to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            example:
              title: 'Advanced Chemistry Lecture'
              description: 'In-depth Organic Chemistry'
              date: '2024-09-03'
              dayOfWeek: 'Wednesday'
              startTime: '14:00'
              endTime: '15:30'
              scheduleId: 'sched_123'
              groupId: 'group_789'
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
    delete:
      tags:
        - Events
      summary: Delete an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: ID of the event to delete
      responses:
        '204':
          description: Event deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Groups
      summary: Create a new group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              name: 'Group B'
              subjects:
                - id: 'subject_101'
                  name: 'Calculus I'
                  hoursPerWeek: 4
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get a group by ID
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: ID of the group to retrieve
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Groups
      summary: Update a group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: ID of the group to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              name: 'Group B - Updated'
              subjects:
                - id: 'subject_102'
                  name: 'Physics II'
                  hoursPerWeek: 3
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Groups
      summary: Delete a group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: ID of the group to delete
      responses:
        '204':
          description: Group deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/subjects:
    get:
      tags:
        - Subjects
      summary: Get all subjects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of subjects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Subjects
      summary: Create a new subject
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
            example:
              name: 'Biology I'
              hoursPerWeek: 3
      responses:
        '201':
          description: Subject created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/subjects/{subjectId}:
    get:
      tags:
        - Subjects
      summary: Get a subject by ID
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
          description: ID of the subject to retrieve
      responses:
        '200':
          description: Subject details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Subjects
      summary: Update a subject
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
          description: ID of the subject to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
            example:
              name: 'Biology II'
              hoursPerWeek: 4
      responses:
        '200':
          description: Subject updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Subjects
      summary: Delete a subject
      security:
        - BearerAuth: []
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
          description: ID of the subject to delete
      responses:
        '204':
          description: Subject deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/teachers:
    get:
      tags:
        - Teachers
      summary: Get all teachers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Teachers
      summary: Create a new teacher
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacherDto'
      responses:
        '201':
          description: Teacher created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/teachers/{teacherId}:
    get:
      tags:
        - Teachers
      summary: Get a teacher by ID
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
          description: ID of the teacher to retrieve
      responses:
        '200':
          description: Teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Teachers
      summary: Update a teacher
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
          description: ID of the teacher to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeacherDto'
      responses:
        '200':
          description: Teacher updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Teachers
      summary: Delete a teacher
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
          description: ID of the teacher to delete
      responses:
        '204':
          description: Teacher deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/semesters:
    post:
      tags:
        - Semesters
      summary: Create a new semester
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSemesterDto'
            example:
              title: 'Spring 2025'
              start_date: '2025-01-15'
              end_date: '2025-05-15'
      responses:
        '201':
          description: Semester created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Semester'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
        - Semesters
      summary: Retrieve all semesters
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of semesters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Semester'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/semesters/{semesterId}:
    get:
      tags:
        - Semesters
      summary: Retrieve a semester by ID
      security:
        - BearerAuth: []
      parameters:
        - name: semesterId
          in: path
          required: true
          schema:
            type: string
          description: ID of the semester to retrieve
      responses:
        '200':
          description: Semester details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Semester'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Semesters
      summary: Update a semester by ID
      security:
        - BearerAuth: []
      parameters:
        - name: semesterId
          in: path
          required: true
          schema:
            type: string
          description: ID of the semester to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSemesterDto'
            example:
              title: 'Advanced Spring 2025'
              start_date: '2025-01-20'
              end_date: '2025-05-20'
      responses:
        '200':
          description: Semester updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Semester'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Semesters
      summary: Delete a semester by ID
      security:
        - BearerAuth: []
      parameters:
        - name: semesterId
          in: path
          required: true
          schema:
            type: string
          description: ID of the semester to delete
      responses:
        '204':
          description: Semester deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/classrooms:
    get:
      tags:
        - Classrooms
      summary: Get all classrooms
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of classrooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Classroom'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Classrooms
      summary: Create a new classroom
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - capacity
              properties:
                name:
                  type: string
                  description: Name of the classroom
                capacity:
                  type: integer
                  description: Maximum number of students the classroom can accommodate
              example:
                name: 'Chemistry 201'
                capacity: 25
      responses:
        '201':
          description: Classroom created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /v1/classrooms/{classroomId}:
    get:
      tags:
        - Classrooms
      summary: Get a classroom by ID
      security:
        - BearerAuth: []
      parameters:
        - name: classroomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the classroom to retrieve
      responses:
        '200':
          description: Classroom details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Classrooms
      summary: Update a classroom
      security:
        - BearerAuth: []
      parameters:
        - name: classroomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the classroom to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the classroom
                capacity:
                  type: integer
                  description: Maximum number of students the classroom can accommodate
              example:
                name: 'Advanced Physics 301'
                capacity: 35
      responses:
        '200':
          description: Classroom updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Classrooms
      summary: Delete a classroom
      security:
        - BearerAuth: []
      parameters:
        - name: classroomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the classroom to delete
      responses:
        '204':
          description: Classroom deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /excelparser/upload:
    post:
      operationId: ExcelparserController_uploadExcel
      summary: Upload and parse an Excel file
      parameters: []
      requestBody:
        required: true
        description: Upload an Excel file for parsing
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: ''
      tags: &a3
        - Excel Parser

  /excelparser/teacher-data:
    get:
      operationId: ExcelparserController_getTeacherData
      parameters: []
      responses:
        '200':
          description: ''
      tags: *a3

  /v1/assignments:
    post:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_create
      summary: Create a new teaching assignment
      parameters: []
      responses:
        '201':
          description: TeachingAssignment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeachingAssignment'
        '400':
          description: Invalid input data
    tags: &a3
      - Teaching assignments
    security: &a4
      - bearer: []
    get:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_findAll
      summary: Retrieve all teaching assignments
      parameters: []
      responses:
        '200':
          description: List of teaching assignments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeachingAssignment'
      security: *a4
    delete:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_removeAll
      summary: Delete all teaching assignments
      responses:
        '204':
          description: All TeachingAssignments deleted successfully
      security: *a4

  /v1/assignments/{assignmentId}:
    get:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_findOne
      summary: Retrieve a teaching assignment by ID
      parameters:
        - name: assignmentId
          required: true
          in: path
          description: ID of the teaching assignment to retrieve
          schema:
            type: string
      responses:
        '200':
          description: TeachingAssignment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeachingAssignment'
        '404':
          description: TeachingAssignment not found
      security: *a4
    patch:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_update
      summary: Update a teaching assignment by ID
      parameters:
        - name: assignmentId
          required: true
          in: path
          description: ID of the teaching assignment to update
          schema:
            type: string
      responses:
        '200':
          description: TeachingAssignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeachingAssignment'
        '400':
          description: Invalid input data
        '404':
          description: TeachingAssignment not found
      security: *a4
    delete:
      tags:
        - Assignments
      operationId: TeachingAssignmentsController_remove
      summary: Delete a teaching assignment by ID
      parameters:
        - name: assignmentId
          required: true
          in: path
          description: ID of the teaching assignment to delete
          schema:
            type: string
      responses:
        '204':
          description: TeachingAssignment deleted successfully
        '404':
          description: TeachingAssignment not found
      security: *a4
