generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Classroom {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  capacity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("classrooms")
}

model events {
  id             BigInt             @id @default(autoincrement())
  title          String             @db.VarChar(100)
  description    String?            @db.Text
  day_of_week    events_day_of_week
  start_time     DateTime           @db.Time(0)
  end_time       DateTime           @db.Time(0)
  schedule_id    BigInt
  group_id       BigInt
  created_at     DateTime?          @default(now()) @db.Timestamp(0)
  updated_at     DateTime?          @default(now()) @db.Timestamp(0)
  schedules      schedules          @relation(fields: [schedule_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "events_ibfk_1")
  student_groups student_groups     @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "events_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([schedule_id], map: "schedule_id")
}

model group_subjects {
  group_id       BigInt
  subject_id     BigInt
  student_groups student_groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_subjects_ibfk_1")
  subjects       subjects       @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "group_subjects_ibfk_2")

  @@id([group_id, subject_id])
  @@index([subject_id], map: "subject_id")
}

model schedules {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(100)
  semester_id BigInt
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  events      events[]
  semester    semesters @relation(fields: [semester_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schedules_ibfk_2")

  @@index([semester_id], map: "semester_id")
}

model semesters {
  id         BigInt      @id @default(autoincrement())
  title      String      @db.VarChar(100)
  start_date DateTime    @db.Date
  end_date   DateTime    @db.Date
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @db.Timestamp(0)
  schedules  schedules[]
}

model student_groups {
  id             BigInt           @id @default(autoincrement())
  name           String           @db.VarChar(100)
  study_year     Int
  students_count Int
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @db.Timestamp(0)
  events         events[]
  group_subjects group_subjects[]
}

model subjects {
  id                 BigInt             @id @default(autoincrement())
  name               String             @db.VarChar(100)
  hours_per_semester Int
  created_at         DateTime?          @default(now()) @db.Timestamp(0)
  updated_at         DateTime?          @default(now()) @db.Timestamp(0)
  group_subjects     group_subjects[]
  teacher_subjects   teacher_subjects[]
}

model teacher_subjects {
  teacher_id BigInt
  subject_id BigInt
  teachers   teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "teacher_subjects_ibfk_1")
  subjects   subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "teacher_subjects_ibfk_2")

  @@id([teacher_id, subject_id])
  @@index([subject_id], map: "subject_id")
}

model teachers {
  id                 BigInt             @id @default(autoincrement())
  max_hours_per_week Int
  created_at         DateTime?          @default(now()) @db.Timestamp(0)
  updated_at         DateTime?          @default(now()) @db.Timestamp(0)
  teacher_subjects   teacher_subjects[]
  users              users              @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "teachers_ibfk_1")
}

model users {
  id         BigInt      @id @default(autoincrement())
  username   String      @db.VarChar(50)
  email      String      @unique(map: "email") @db.VarChar(100)
  password   String      @db.VarChar(255)
  role       users_role
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @default(now()) @db.Timestamp(0)
  teachers   teachers?
}

enum events_day_of_week {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum users_role {
  student
  teacher
  admin
}
